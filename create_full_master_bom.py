#!/usr/bin/env python3
"""
Cr√©e un Master BOM plus complet avec plus de composants de votre fichier
pour tester le lookup sur plus de lignes
"""

import pandas as pd
from datetime import datetime

def create_full_master_bom():
    """Cr√©e un Master BOM avec plus de composants de votre fichier."""
    
    print("Cr√©ation d'un Master BOM plus complet...")
    
    # Lire votre fichier pour r√©cup√©rer plus de PN
    input_df = pd.read_excel('frontend/uploads/20250729_094812_PP_B2_GPDB_BOM.xlsx')
    
    # Prendre les 50 premiers PN de votre fichier
    sample_pns = input_df['YAZAKI PN'].head(50).tolist()
    
    # Cr√©er des statuts vari√©s pour ces composants
    statuses = []
    for i, pn in enumerate(sample_pns):
        if i % 4 == 0:
            statuses.append('X')  # Ancien
        elif i % 4 == 1:
            statuses.append('D')  # D√©pr√©ci√©
        elif i % 4 == 2:
            statuses.append('0')  # Doublon
        else:
            statuses.append('X')  # Ancien
    
    # Donn√©es du Master BOM √©tendu
    master_data = {
        'PN': sample_pns,
        'Project': ['FORD_J74_V710_B2_PP_YOTK_00000'] * len(sample_pns),
        'Description': [f'LT Single Wire HFSK3M Component {i+1}' for i in range(len(sample_pns))],
        'Supplier': ['Yazaki Corporation'] * len(sample_pns),
        'Price': [2.50] * len(sample_pns),
        'Status': statuses,
        'Last_Updated': [datetime.now().strftime('%Y-%m-%d')] * len(sample_pns),
        'Category': ['Wire/Cable'] * len(sample_pns),
        'Lead_Time_Days': [14] * len(sample_pns),
        'Min_Order_Qty': [1000] * len(sample_pns)
    }
    
    # Cr√©er le DataFrame
    df = pd.DataFrame(master_data)
    
    # Sauvegarder le Master BOM
    filename = 'Master_BOM.xlsx'
    df.to_excel(filename, index=False)
    
    print(f"‚úÖ Master BOM √©tendu cr√©√©: {filename}")
    print(f"üìä Composants: {len(df)}")
    
    # Compter les statuts
    status_counts = df['Status'].value_counts()
    print(f"\nüìà R√©partition des statuts:")
    for status, count in status_counts.items():
        print(f"   ‚Ä¢ Status '{status}': {count} composants")
    
    print(f"\nüîç Correspondances attendues:")
    print(f"   ‚Ä¢ {len(sample_pns)} composants seront trouv√©s dans le Master BOM")
    print(f"   ‚Ä¢ {355 - len(sample_pns)} composants seront NaN (nouveaux)")
    print(f"   ‚Ä¢ Plus de vari√©t√© dans les statuts X, D, 0")
    
    return filename

if __name__ == '__main__':
    create_full_master_bom()
