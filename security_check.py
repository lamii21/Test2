#!/usr/bin/env python3
"""
Script de v√©rification de s√©curit√© pour Component Data Processor
"""

import os
import stat
from pathlib import Path

def check_file_permissions():
    """V√©rifie les permissions des fichiers sensibles."""
    print("üîí V√âRIFICATION DES PERMISSIONS")
    print("=" * 50)
    
    sensitive_files = [
        'Master_BOM.xlsx',
        'config/default.json',
        '.env'
    ]
    
    issues = []
    
    for file_path in sensitive_files:
        path = Path(file_path)
        if path.exists():
            file_stat = path.stat()
            permissions = stat.filemode(file_stat.st_mode)
            
            # V√©rifier si le fichier est lisible par tous
            if file_stat.st_mode & stat.S_IROTH:
                issues.append(f"‚ö†Ô∏è  {file_path}: Lisible par tous ({permissions})")
            else:
                print(f"‚úÖ {file_path}: Permissions OK ({permissions})")
        else:
            print(f"‚ÑπÔ∏è  {file_path}: Fichier non trouv√©")
    
    return issues

def check_environment():
    """V√©rifie la configuration d'environnement."""
    print(f"\nüåç V√âRIFICATION DE L'ENVIRONNEMENT")
    print("=" * 50)
    
    issues = []
    
    # V√©rifier la cl√© secr√®te
    secret_key = os.environ.get('SECRET_KEY')
    if not secret_key:
        issues.append("‚ö†Ô∏è  SECRET_KEY non d√©finie")
    elif secret_key == 'component_processor_key':
        issues.append("üö® SECRET_KEY utilise la valeur par d√©faut (CRITIQUE)")
    elif len(secret_key) < 32:
        issues.append("‚ö†Ô∏è  SECRET_KEY trop courte (< 32 caract√®res)")
    else:
        print("‚úÖ SECRET_KEY: Configuration OK")
    
    # V√©rifier le mode debug
    debug = os.environ.get('DEBUG', 'false').lower()
    if debug == 'true':
        issues.append("üö® DEBUG activ√© en production (CRITIQUE)")
    else:
        print("‚úÖ DEBUG: D√©sactiv√©")
    
    return issues

def check_directory_security():
    """V√©rifie la s√©curit√© des r√©pertoires."""
    print(f"\nüìÅ V√âRIFICATION DES R√âPERTOIRES")
    print("=" * 50)
    
    issues = []
    directories = ['output', 'frontend/uploads', 'config']
    
    for dir_path in directories:
        path = Path(dir_path)
        if path.exists():
            dir_stat = path.stat()
            permissions = stat.filemode(dir_stat.st_mode)
            
            # V√©rifier si le r√©pertoire est accessible en √©criture par tous
            if dir_stat.st_mode & stat.S_IWOTH:
                issues.append(f"‚ö†Ô∏è  {dir_path}: √âcriture autoris√©e pour tous ({permissions})")
            else:
                print(f"‚úÖ {dir_path}: Permissions OK ({permissions})")
        else:
            print(f"‚ÑπÔ∏è  {dir_path}: R√©pertoire non trouv√©")
    
    return issues

def main():
    """Fonction principale de v√©rification."""
    print("üõ°Ô∏è  AUDIT DE S√âCURIT√â - COMPONENT DATA PROCESSOR")
    print("=" * 60)
    
    all_issues = []
    
    # V√©rifications
    all_issues.extend(check_file_permissions())
    all_issues.extend(check_environment())
    all_issues.extend(check_directory_security())
    
    # R√©sum√©
    print(f"\nüìä R√âSUM√â DE L'AUDIT")
    print("=" * 50)
    
    if all_issues:
        print(f"üö® {len(all_issues)} probl√®me(s) de s√©curit√© d√©tect√©(s):")
        for issue in all_issues:
            print(f"   {issue}")
        
        print(f"\nüí° RECOMMANDATIONS:")
        print(f"   ‚Ä¢ D√©finissez SECRET_KEY dans .env")
        print(f"   ‚Ä¢ V√©rifiez les permissions des fichiers")
        print(f"   ‚Ä¢ D√©sactivez DEBUG en production")
        print(f"   ‚Ä¢ Limitez l'acc√®s aux r√©pertoires sensibles")
        
        return False
    else:
        print("‚úÖ Aucun probl√®me de s√©curit√© d√©tect√©")
        return True

if __name__ == '__main__':
    success = main()
    exit(0 if success else 1)
